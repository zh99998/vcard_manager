// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package edu.sdust.vcard_manager;

import edu.sdust.vcard_manager.CardDataOnDemand;
import edu.sdust.vcard_manager.Info;
import edu.sdust.vcard_manager.InfoDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect InfoDataOnDemand_Roo_DataOnDemand {
    
    declare @type: InfoDataOnDemand: @Component;
    
    private Random InfoDataOnDemand.rnd = new SecureRandom();
    
    private List<Info> InfoDataOnDemand.data;
    
    @Autowired
    CardDataOnDemand InfoDataOnDemand.cardDataOnDemand;
    
    public Info InfoDataOnDemand.getNewTransientInfo(int index) {
        Info obj = new Info();
        setProperty(obj, index);
        setType(obj, index);
        setValue(obj, index);
        return obj;
    }
    
    public void InfoDataOnDemand.setProperty(Info obj, int index) {
        String property = "property_" + index;
        obj.setProperty(property);
    }
    
    public void InfoDataOnDemand.setType(Info obj, int index) {
        String type = "type_" + index;
        obj.setType(type);
    }
    
    public void InfoDataOnDemand.setValue(Info obj, int index) {
        String value = "value_" + index;
        obj.setValue(value);
    }
    
    public Info InfoDataOnDemand.getSpecificInfo(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Info obj = data.get(index);
        Long id = obj.getId();
        return Info.findInfo(id);
    }
    
    public Info InfoDataOnDemand.getRandomInfo() {
        init();
        Info obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Info.findInfo(id);
    }
    
    public boolean InfoDataOnDemand.modifyInfo(Info obj) {
        return false;
    }
    
    public void InfoDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Info.findInfoEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Info' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Info>();
        for (int i = 0; i < 10; i++) {
            Info obj = getNewTransientInfo(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
